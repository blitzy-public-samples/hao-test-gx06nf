name: Continuous Deployment

on:
  push:
    branches:
      - main
    paths:
      - 'src/backend/**'
      - 'infrastructure/kubernetes/**'
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        options:
          - staging
          - production
        required: true
        description: 'Target deployment environment'
      version:
        type: string
        required: false
        description: 'Specific version to deploy (optional)'

env:
  DOCKER_REGISTRY: gcr.io
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: us-central1
  HEALTH_CHECK_ENDPOINT: /health
  DEPLOYMENT_TIMEOUT: 45m
  ERROR_THRESHOLD: 5%

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: read
  id-token: write
  deployments: write
  checks: write

jobs:
  deploy:
    name: Deploy to ${{ inputs.environment || 'staging' }}
    runs-on: ubuntu-latest
    timeout-minutes: 45
    environment:
      name: ${{ inputs.environment || 'staging' }}
      url: ${{ inputs.environment == 'production' && 'https://api.example.com' || 'https://api-staging.example.com' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Google Cloud Authentication
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_WORKLOAD_IDENTITY_SA }}
          token_format: 'access_token'
          create_credentials_file: true

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.PROJECT_ID }}
          install_components: 'beta,kubectl,gke-gcloud-auth-plugin'

      - name: Configure Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          install: true
          version: latest
          driver-opts: |
            image=moby/buildkit:latest
            network=host

      - name: Set environment variables
        run: |
          if [ "${{ inputs.environment }}" == "production" ]; then
            echo "MIN_INSTANCES=2" >> $GITHUB_ENV
            echo "MAX_INSTANCES=10" >> $GITHUB_ENV
            echo "ERROR_THRESHOLD=5%" >> $GITHUB_ENV
          else
            echo "MIN_INSTANCES=1" >> $GITHUB_ENV
            echo "MAX_INSTANCES=5" >> $GITHUB_ENV
            echo "ERROR_THRESHOLD=10%" >> $GITHUB_ENV
          fi
          echo "IMAGE_TAG=${GITHUB_SHA::8}" >> $GITHUB_ENV

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ env.PROJECT_ID }}/api:${{ env.IMAGE_TAG }}
            ${{ env.DOCKER_REGISTRY }}/${{ env.PROJECT_ID }}/api:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            ENV=${{ inputs.environment || 'staging' }}
          platforms: linux/amd64

      - name: Deploy to Cloud Run
        id: deploy
        run: |
          gcloud run deploy api-service \
            --image ${{ env.DOCKER_REGISTRY }}/${{ env.PROJECT_ID }}/api:${{ env.IMAGE_TAG }} \
            --region ${{ env.REGION }} \
            --platform managed \
            --memory 4Gi \
            --cpu 2 \
            --min-instances ${{ env.MIN_INSTANCES }} \
            --max-instances ${{ env.MAX_INSTANCES }} \
            --timeout 30s \
            --port 8000 \
            --set-env-vars "ENV=${{ inputs.environment || 'staging' }}" \
            --allow-unauthenticated \
            --tag ${{ env.IMAGE_TAG }}

      - name: Health check
        id: health_check
        run: |
          endpoint="${{ steps.deploy.outputs.url }}${HEALTH_CHECK_ENDPOINT}"
          for i in {1..3}; do
            if curl -s -H "Authorization: Bearer ${{ secrets.HEALTH_CHECK_TOKEN }}" "$endpoint" | grep -q "healthy"; then
              echo "Health check passed"
              exit 0
            fi
            sleep 10
          done
          echo "Health check failed"
          exit 1

      - name: Monitor deployment
        id: monitor
        run: |
          error_count=0
          for i in {1..30}; do
            error_rate=$(gcloud run services describe api-service --region ${{ env.REGION }} --format='get(status.error_rate)')
            if (( $(echo "$error_rate > ${{ env.ERROR_THRESHOLD }}" | bc -l) )); then
              ((error_count++))
              if [ $error_count -ge 5 ]; then
                echo "Error rate exceeded threshold for too long"
                exit 1
              fi
            else
              error_count=0
            fi
            sleep 60
          done

      - name: Rollback on failure
        if: failure()
        run: |
          previous_revision=$(gcloud run revisions list --service api-service --region ${{ env.REGION }} --sort-by=~createTime --limit=2 | tail -n 1 | awk '{print $2}')
          gcloud run services update-traffic api-service \
            --region ${{ env.REGION }} \
            --to-revisions=$previous_revision=100

      - name: Notify on failure
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            const message = `Deployment to ${{ inputs.environment || 'staging' }} failed.
            Commit: ${process.env.GITHUB_SHA}
            Workflow: ${process.env.GITHUB_WORKFLOW}
            Run: ${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID}`;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'ðŸš¨ Deployment Failure',
              body: message,
              labels: ['deployment-failure']
            });

      - name: Notify on success
        if: success()
        run: |
          echo "::notice::Deployment to ${{ inputs.environment || 'staging' }} successful"