# Upstream definition for Flask API backend
upstream upstream_api {
    server 127.0.0.1:8000 max_fails=3 fail_timeout=30s;
}

# HTTP server block - redirects all traffic to HTTPS
server {
    listen 80;
    server_name _;
    
    # Force redirect to HTTPS
    return 301 https://$host$request_uri;
}

# HTTPS server block for API traffic
server {
    listen 443 ssl http2;
    server_name _;

    # SSL configuration
    ssl_certificate /etc/nginx/ssl/api.specmanagement.com.crt;
    ssl_certificate_key /etc/nginx/ssl/api.specmanagement.com.key;
    ssl_trusted_certificate /etc/nginx/ssl/ca.crt;

    # SSL protocols and ciphers
    ssl_protocols TLSv1.3;
    ssl_ciphers EECDH+AESGCM:EDH+AESGCM;
    ssl_prefer_server_ciphers on;

    # SSL session handling
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    # OCSP Stapling
    ssl_stapling on;
    ssl_stapling_verify on;
    resolver 8.8.8.8 8.8.4.4 valid=300s;
    resolver_timeout 5s;

    # Security headers
    add_header Strict-Transport-Security 'max-age=31536000' always;
    add_header X-Content-Type-Options 'nosniff' always;
    add_header X-Frame-Options 'DENY' always;
    add_header Content-Security-Policy "default-src 'self'" always;
    add_header X-XSS-Protection '1; mode=block' always;

    # Main API location block
    location / {
        proxy_pass http://upstream_api;
        proxy_http_version 1.1;

        # Request headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Buffer settings
        proxy_buffering on;
        proxy_buffer_size 128k;
        proxy_buffers 4 256k;
        proxy_busy_buffers_size 256k;

        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;

        # Upstream failure handling
        proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
        proxy_next_upstream_tries 2;
    }

    # Health check endpoint
    location /health {
        access_log off;
        return 200;
    }
}